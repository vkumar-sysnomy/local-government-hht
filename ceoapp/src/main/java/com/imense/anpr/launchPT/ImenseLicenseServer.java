//Copyright Imense Ltd 2017. Unauthorised usage or distribution strictly prohibited.
package com.imense.anpr.launchPT;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.util.Base64;
import android.widget.Toast;

import com.farthestgate.android.helper.DBHelper;
import com.farthestgate.android.ui.pcn.VisualPCNListActivity;
import com.farthestgate.android.utils.CroutonUtils;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.SingleClientConnManager;
import org.apache.http.util.EntityUtils;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.security.cert.CertificateException;
import javax.security.cert.X509Certificate;


//If the app does not have a valid license key generated by Imense, then this class is used to generate a unique device ID and request a new license key from
//Imense's licensing server using the SSL protocol. 
final public class ImenseLicenseServer extends AsyncTask<Void, Void, Boolean> {

	public final static int LICENSESERVER_SUCCEEDED = 9999;
	public final static int LICENSESERVER_FAILED = 7777;

	private static final String identity = "farthestgate.co.uk";

	//Base64 String obfuscation
	private static final String ImenseLicenseServerLogin = decodeString("TG9naW41MDExMDc=");
	private static final String ImenseLicenseServerPassword = decodeString("ejBib2ptOTVmcnU5");

	private static final String ImenseLicenseServerURL = decodeString("aHR0cHM6Ly9saWNlbnNpbmcuaW1lbnNlLmNvbS9rZXlnZW4yL2luZGV4LmpzcD91aWQ9");

	public static final int VALID_KEY_LENGTH = 32;
	public static final int VALID_UID_LENGTH = 32;

	private Activity activity;

	private String licensekey = null; //Imense license key
	private String serverResponseMessage = null; //if server responds with error message
	private String device_uid = null;


	//keystore for Imense server SSL certificate
	private static final byte[] imense_ssl_certificate = {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x14, (byte) 0x56, (byte) 0xed, (byte) 0xca, (byte) 0x9c, (byte) 0x7d, (byte) 0x5c, (byte) 0xc2, (byte) 0x1d, (byte) 0xbe, (byte) 0x97, (byte) 0x3d, (byte) 0xf5, (byte) 0xa5, (byte) 0xb1, (byte) 0x36, (byte) 0xd1, (byte) 0xbb, (byte) 0xc2, (byte) 0x09, (byte) 0x6d, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xfe, (byte) 0x01, (byte) 0x00, (byte) 0x0b, (byte) 0x73, (byte) 0x73, (byte) 0x6c, (byte) 0x74, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x63, (byte) 0x65, (byte) 0x72, (byte) 0x74, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x41, (byte) 0xcc, (byte) 0x5f, (byte) 0x7a, (byte) 0x1e, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x58, (byte) 0x2e, (byte) 0x35, (byte) 0x30, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0xa4, (byte) 0x30, (byte) 0x82, (byte) 0x03, (byte) 0xa0, (byte) 0x30, (byte) 0x82, (byte) 0x02, (byte) 0x88, (byte) 0xa0, (byte) 0x03, (byte) 0x02, (byte) 0x01, (byte) 0x02, (byte) 0x02, (byte) 0x04, (byte) 0x52, (byte) 0x61, (byte) 0x5b, (byte) 0x94, (byte) 0x30, (byte) 0x0d, (byte) 0x06, (byte) 0x09, (byte) 0x2a, (byte) 0x86, (byte) 0x48, (byte) 0x86, (byte) 0xf7, (byte) 0x0d, (byte) 0x01, (byte) 0x01, (byte) 0x05, (byte) 0x05, (byte) 0x00, (byte) 0x30, (byte) 0x81, (byte) 0x90, (byte) 0x31, (byte) 0x0b, (byte) 0x30, (byte) 0x09, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x06, (byte) 0x13, (byte) 0x02, (byte) 0x47, (byte) 0x42, (byte) 0x31, (byte) 0x17, (byte) 0x30, (byte) 0x15, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x08, (byte) 0x13, (byte) 0x0e, (byte) 0x43, (byte) 0x61, (byte) 0x6d, (byte) 0x62, (byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x67, (byte) 0x65, (byte) 0x73, (byte) 0x68, (byte) 0x69, (byte) 0x72, (byte) 0x65, (byte) 0x31, (byte) 0x12, (byte) 0x30, (byte) 0x10, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x07, (byte) 0x13, (byte) 0x09, (byte) 0x43, (byte) 0x61, (byte) 0x6d, (byte) 0x62, (byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x67, (byte) 0x65, (byte) 0x31, (byte) 0x13, (byte) 0x30, (byte) 0x11, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x0a, (byte) 0x13, (byte) 0x0a, (byte) 0x49, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x73, (byte) 0x65, (byte) 0x20, (byte) 0x4c, (byte) 0x74, (byte) 0x64, (byte) 0x31, (byte) 0x20, (byte) 0x30, (byte) 0x1e, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x0b, (byte) 0x13, (byte) 0x17, (byte) 0x41, (byte) 0x70, (byte) 0x70, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x20, (byte) 0x44, (byte) 0x65, (byte) 0x76, (byte) 0x65, (byte) 0x6c, (byte) 0x6f, (byte) 0x70, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x31, (byte) 0x1d, (byte) 0x30, (byte) 0x1b, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x03, (byte) 0x13, (byte) 0x14, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x65, (byte) 0x6e, (byte) 0x73, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x2e, (byte) 0x69, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x73, (byte) 0x65, (byte) 0x2e, (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x30, (byte) 0x20, (byte) 0x17, (byte) 0x0d, (byte) 0x31, (byte) 0x33, (byte) 0x31, (byte) 0x30, (byte) 0x31, (byte) 0x38, (byte) 0x31, (byte) 0x36, (byte) 0x30, (byte) 0x32, (byte) 0x32, (byte) 0x38, (byte) 0x5a, (byte) 0x18, (byte) 0x0f, (byte) 0x32, (byte) 0x32, (byte) 0x38, (byte) 0x37, (byte) 0x30, (byte) 0x38, (byte) 0x30, (byte) 0x32, (byte) 0x31, (byte) 0x36, (byte) 0x30, (byte) 0x32, (byte) 0x32, (byte) 0x38, (byte) 0x5a, (byte) 0x30, (byte) 0x81, (byte) 0x90, (byte) 0x31, (byte) 0x0b, (byte) 0x30, (byte) 0x09, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x06, (byte) 0x13, (byte) 0x02, (byte) 0x47, (byte) 0x42, (byte) 0x31, (byte) 0x17, (byte) 0x30, (byte) 0x15, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x08, (byte) 0x13, (byte) 0x0e, (byte) 0x43, (byte) 0x61, (byte) 0x6d, (byte) 0x62, (byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x67, (byte) 0x65, (byte) 0x73, (byte) 0x68, (byte) 0x69, (byte) 0x72, (byte) 0x65, (byte) 0x31, (byte) 0x12, (byte) 0x30, (byte) 0x10, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x07, (byte) 0x13, (byte) 0x09, (byte) 0x43, (byte) 0x61, (byte) 0x6d, (byte) 0x62, (byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x67, (byte) 0x65, (byte) 0x31, (byte) 0x13, (byte) 0x30, (byte) 0x11, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x0a, (byte) 0x13, (byte) 0x0a, (byte) 0x49, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x73, (byte) 0x65, (byte) 0x20, (byte) 0x4c, (byte) 0x74, (byte) 0x64, (byte) 0x31, (byte) 0x20, (byte) 0x30, (byte) 0x1e, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x0b, (byte) 0x13, (byte) 0x17, (byte) 0x41, (byte) 0x70, (byte) 0x70, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x20, (byte) 0x44, (byte) 0x65, (byte) 0x76, (byte) 0x65, (byte) 0x6c, (byte) 0x6f, (byte) 0x70, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x31, (byte) 0x1d, (byte) 0x30, (byte) 0x1b, (byte) 0x06, (byte) 0x03, (byte) 0x55, (byte) 0x04, (byte) 0x03, (byte) 0x13, (byte) 0x14, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x65, (byte) 0x6e, (byte) 0x73, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x2e, (byte) 0x69, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x73, (byte) 0x65, (byte) 0x2e, (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x30, (byte) 0x82, (byte) 0x01, (byte) 0x22, (byte) 0x30, (byte) 0x0d, (byte) 0x06, (byte) 0x09, (byte) 0x2a, (byte) 0x86, (byte) 0x48, (byte) 0x86, (byte) 0xf7, (byte) 0x0d, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x05, (byte) 0x00, (byte) 0x03, (byte) 0x82, (byte) 0x01, (byte) 0x0f, (byte) 0x00, (byte) 0x30, (byte) 0x82, (byte) 0x01, (byte) 0x0a, (byte) 0x02, (byte) 0x82, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0xac, (byte) 0xab, (byte) 0x95, (byte) 0xa2, (byte) 0xe5, (byte) 0xa9, (byte) 0x5f, (byte) 0xca, (byte) 0x63, (byte) 0x89, (byte) 0x8a, (byte) 0x45, (byte) 0x7e, (byte) 0xe5, (byte) 0x29, (byte) 0xb6, (byte) 0x37, (byte) 0x51, (byte) 0x49, (byte) 0xe4, (byte) 0x7b, (byte) 0xae, (byte) 0xcb, (byte) 0xcc, (byte) 0xda, (byte) 0x2f, (byte) 0x63, (byte) 0xf8, (byte) 0x50, (byte) 0xa2, (byte) 0x09, (byte) 0x76, (byte) 0xde, (byte) 0x90, (byte) 0xaa, (byte) 0x15, (byte) 0x41, (byte) 0x34, (byte) 0x59, (byte) 0x06, (byte) 0x75, (byte) 0x56, (byte) 0x51, (byte) 0xc8, (byte) 0xa6, (byte) 0xa7, (byte) 0xa3, (byte) 0x89, (byte) 0x6d, (byte) 0xfe, (byte) 0x7b, (byte) 0x1c, (byte) 0x4b, (byte) 0x32, (byte) 0xee, (byte) 0x9d, (byte) 0x0d, (byte) 0x8c, (byte) 0xb9, (byte) 0xb4, (byte) 0x94, (byte) 0x6b, (byte) 0xcc, (byte) 0x5c, (byte) 0x47, (byte) 0x63, (byte) 0x45, (byte) 0xad, (byte) 0xbb, (byte) 0xe9, (byte) 0x8b, (byte) 0x46, (byte) 0xdc, (byte) 0x85, (byte) 0x04, (byte) 0xb0, (byte) 0x6e, (byte) 0x1f, (byte) 0x9a, (byte) 0x84, (byte) 0xa7, (byte) 0x8d, (byte) 0x58, (byte) 0x5f, (byte) 0x31, (byte) 0xb8, (byte) 0xb2, (byte) 0xf1, (byte) 0x20, (byte) 0x8a, (byte) 0x69, (byte) 0x7a, (byte) 0xc1, (byte) 0x47, (byte) 0x31, (byte) 0x3c, (byte) 0xcb, (byte) 0x9d, (byte) 0x24, (byte) 0x16, (byte) 0xfc, (byte) 0x8f, (byte) 0x27, (byte) 0x43, (byte) 0x25, (byte) 0x5d, (byte) 0xec, (byte) 0x00, (byte) 0xfa, (byte) 0xa7, (byte) 0x40, (byte) 0x92, (byte) 0x37, (byte) 0xfb, (byte) 0xc7, (byte) 0x62, (byte) 0x9f, (byte) 0xfd, (byte) 0x68, (byte) 0x8c, (byte) 0x4c, (byte) 0x1a, (byte) 0xae, (byte) 0x7f, (byte) 0xa6, (byte) 0xdd, (byte) 0x1b, (byte) 0xfc, (byte) 0xd5, (byte) 0xc0, (byte) 0x53, (byte) 0x5e, (byte) 0xed, (byte) 0x83, (byte) 0xa5, (byte) 0x27, (byte) 0x00, (byte) 0xca, (byte) 0x9a, (byte) 0x4e, (byte) 0x73, (byte) 0x48, (byte) 0x9c, (byte) 0x74, (byte) 0x98, (byte) 0x7b, (byte) 0xef, (byte) 0xaf, (byte) 0x3f, (byte) 0xc5, (byte) 0x74, (byte) 0xbf, (byte) 0x8a, (byte) 0xfa, (byte) 0xc4, (byte) 0x5e, (byte) 0xe6, (byte) 0x44, (byte) 0x33, (byte) 0x05, (byte) 0x12, (byte) 0x19, (byte) 0x70, (byte) 0x00, (byte) 0x1e, (byte) 0x3b, (byte) 0xd7, (byte) 0x91, (byte) 0x87, (byte) 0xb6, (byte) 0x32, (byte) 0x08, (byte) 0xd5, (byte) 0xe3, (byte) 0x6a, (byte) 0xe9, (byte) 0x6a, (byte) 0xf7, (byte) 0xbf, (byte) 0x16, (byte) 0x35, (byte) 0xe4, (byte) 0x75, (byte) 0xd2, (byte) 0x15, (byte) 0x47, (byte) 0xfe, (byte) 0x03, (byte) 0x07, (byte) 0x7f, (byte) 0x52, (byte) 0x08, (byte) 0x30, (byte) 0x12, (byte) 0xd4, (byte) 0x5a, (byte) 0x7e, (byte) 0xd8, (byte) 0x30, (byte) 0xc7, (byte) 0x9a, (byte) 0x23, (byte) 0x72, (byte) 0x8a, (byte) 0x64, (byte) 0xd9, (byte) 0x67, (byte) 0x7a, (byte) 0xa2, (byte) 0xd0, (byte) 0x2e, (byte) 0x74, (byte) 0x3e, (byte) 0xd9, (byte) 0x7f, (byte) 0xc5, (byte) 0x38, (byte) 0xb3, (byte) 0x7a, (byte) 0x0a, (byte) 0xf5, (byte) 0x8c, (byte) 0x3d, (byte) 0x89, (byte) 0x5b, (byte) 0x70, (byte) 0xb2, (byte) 0xef, (byte) 0x8b, (byte) 0x5f, (byte) 0x32, (byte) 0x84, (byte) 0xad, (byte) 0xd9, (byte) 0x67, (byte) 0x88, (byte) 0x9d, (byte) 0x99, (byte) 0x3e, (byte) 0xc2, (byte) 0x0c, (byte) 0x98, (byte) 0x59, (byte) 0x93, (byte) 0xf0, (byte) 0x54, (byte) 0x20, (byte) 0xc2, (byte) 0xd0, (byte) 0xf4, (byte) 0x6a, (byte) 0xfe, (byte) 0x44, (byte) 0x8b, (byte) 0x70, (byte) 0xa9, (byte) 0x02, (byte) 0x03, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x30, (byte) 0x0d, (byte) 0x06, (byte) 0x09, (byte) 0x2a, (byte) 0x86, (byte) 0x48, (byte) 0x86, (byte) 0xf7, (byte) 0x0d, (byte) 0x01, (byte) 0x01, (byte) 0x05, (byte) 0x05, (byte) 0x00, (byte) 0x03, (byte) 0x82, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x29, (byte) 0x68, (byte) 0xbb, (byte) 0x35, (byte) 0xe3, (byte) 0xb7, (byte) 0xc6, (byte) 0x94, (byte) 0xc5, (byte) 0xab, (byte) 0xfa, (byte) 0xba, (byte) 0x6f, (byte) 0x7a, (byte) 0xfc, (byte) 0xe6, (byte) 0x9a, (byte) 0xf5, (byte) 0x81, (byte) 0xfe, (byte) 0x95, (byte) 0x3b, (byte) 0x60, (byte) 0xf4, (byte) 0x8a, (byte) 0x6f, (byte) 0x49, (byte) 0xdb, (byte) 0x18, (byte) 0x41, (byte) 0x04, (byte) 0x93, (byte) 0x3f, (byte) 0xad, (byte) 0xc5, (byte) 0xb1, (byte) 0x7c, (byte) 0xe5, (byte) 0x7a, (byte) 0xd2, (byte) 0xb1, (byte) 0x66, (byte) 0x1d, (byte) 0xfe, (byte) 0x06, (byte) 0xac, (byte) 0xe3, (byte) 0x70, (byte) 0x46, (byte) 0x9d, (byte) 0x6d, (byte) 0x43, (byte) 0xe6, (byte) 0x3f, (byte) 0x4f, (byte) 0xbd, (byte) 0xf3, (byte) 0x69, (byte) 0xb9, (byte) 0xae, (byte) 0x5a, (byte) 0x40, (byte) 0xc0, (byte) 0x7d, (byte) 0x8e, (byte) 0x4c, (byte) 0x01, (byte) 0x00, (byte) 0x1a, (byte) 0xe2, (byte) 0xec, (byte) 0x28, (byte) 0x3b, (byte) 0x85, (byte) 0xb5, (byte) 0x75, (byte) 0x01, (byte) 0x8a, (byte) 0x5c, (byte) 0x0b, (byte) 0x65, (byte) 0x2b, (byte) 0xa1, (byte) 0xee, (byte) 0x6a, (byte) 0xae, (byte) 0x96, (byte) 0xf4, (byte) 0xc0, (byte) 0xa0, (byte) 0xda, (byte) 0x94, (byte) 0xd2, (byte) 0x0b, (byte) 0xce, (byte) 0x75, (byte) 0xde, (byte) 0x14, (byte) 0x81, (byte) 0x30, (byte) 0xdc, (byte) 0xd6, (byte) 0x44, (byte) 0x38, (byte) 0x6d, (byte) 0xe6, (byte) 0x7a, (byte) 0xa5, (byte) 0xd2, (byte) 0x9a, (byte) 0xf3, (byte) 0xd2, (byte) 0x1e, (byte) 0x9a, (byte) 0xa0, (byte) 0xb9, (byte) 0xf2, (byte) 0xda, (byte) 0x5e, (byte) 0x53, (byte) 0xda, (byte) 0x28, (byte) 0x49, (byte) 0xa5, (byte) 0xb8, (byte) 0x58, (byte) 0xd0, (byte) 0x48, (byte) 0x6c, (byte) 0x88, (byte) 0xa5, (byte) 0xe1, (byte) 0x38, (byte) 0x7c, (byte) 0x64, (byte) 0x41, (byte) 0xb5, (byte) 0xdf, (byte) 0xb2, (byte) 0xbc, (byte) 0xea, (byte) 0x0c, (byte) 0x27, (byte) 0xb3, (byte) 0x7a, (byte) 0xa1, (byte) 0xeb, (byte) 0x0e, (byte) 0x13, (byte) 0x66, (byte) 0x91, (byte) 0xff, (byte) 0x4f, (byte) 0x59, (byte) 0x2b, (byte) 0x6c, (byte) 0x9b, (byte) 0xf5, (byte) 0xee, (byte) 0x0f, (byte) 0x11, (byte) 0xe8, (byte) 0x7f, (byte) 0x2d, (byte) 0xbc, (byte) 0x25, (byte) 0x2e, (byte) 0xfe, (byte) 0xf0, (byte) 0x53, (byte) 0x76, (byte) 0x35, (byte) 0xfa, (byte) 0x89, (byte) 0xd2, (byte) 0x64, (byte) 0x99, (byte) 0x1b, (byte) 0x24, (byte) 0x63, (byte) 0x0d, (byte) 0xd8, (byte) 0xdb, (byte) 0x86, (byte) 0xf5, (byte) 0x83, (byte) 0xdf, (byte) 0xf6, (byte) 0x9e, (byte) 0x62, (byte) 0xdb, (byte) 0x31, (byte) 0x44, (byte) 0x16, (byte) 0xa5, (byte) 0x9b, (byte) 0xa0, (byte) 0xd7, (byte) 0xbc, (byte) 0x75, (byte) 0xd2, (byte) 0xd6, (byte) 0x13, (byte) 0xb2, (byte) 0xc3, (byte) 0x50, (byte) 0xbc, (byte) 0x11, (byte) 0x1c, (byte) 0x68, (byte) 0xab, (byte) 0xa8, (byte) 0xbd, (byte) 0x07, (byte) 0xc7, (byte) 0xc7, (byte) 0x47, (byte) 0xaf, (byte) 0x8d, (byte) 0xa9, (byte) 0x22, (byte) 0x9c, (byte) 0x8a, (byte) 0xba, (byte) 0x0d, (byte) 0x41, (byte) 0x81, (byte) 0xc7, (byte) 0xb2, (byte) 0x4d, (byte) 0x7e, (byte) 0x33, (byte) 0x3c, (byte) 0x90, (byte) 0xe2, (byte) 0x59, (byte) 0x3a, (byte) 0x80, (byte) 0xc4, (byte) 0x53, (byte) 0xd8, (byte) 0xf9, (byte) 0x91, (byte) 0x6f, (byte) 0x0c, (byte) 0xde, (byte) 0x5d, (byte) 0x32, (byte) 0x61, (byte) 0xe7, (byte) 0xa4, (byte) 0x36, (byte) 0xf8, (byte) 0x01, (byte) 0x03, (byte) 0x59, (byte) 0x00, (byte) 0x17, (byte) 0x2c, (byte) 0x92, (byte) 0xf2, (byte) 0xf2, (byte) 0xb7, (byte) 0x41, (byte) 0xd8, (byte) 0x9b, (byte) 0xf8, (byte) 0x2f, (byte) 0xf1, (byte) 0x88, (byte) 0x62, (byte) 0xe2, (byte) 0x26, (byte) 0x46, (byte) 0x29, (byte) 0x47, (byte) 0x77};

	private static String decodeString(String in) {
		byte[] out = Base64.decode(in, 0);
		return new String(out);
	}

	public ImenseLicenseServer(Activity activity, String device_uid) {
		this.activity = activity;
		this.device_uid = device_uid;
	}


	final class MySSLSocketFactory extends SSLSocketFactory {
		SSLContext sslContext = SSLContext.getInstance("TLS");

		public MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException,
				KeyStoreException, UnrecoverableKeyException {
			super(truststore);

			TrustManager tm = new X509TrustManager() {
				public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
				}

				public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
				}

				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					return null;
				}

				@Override
				public void checkClientTrusted(
						java.security.cert.X509Certificate[] chain,
						String authType)
						throws java.security.cert.CertificateException {
					// TODO Auto-generated method stub

				}

				@Override
				public void checkServerTrusted(
						java.security.cert.X509Certificate[] chain,
						String authType)
						throws java.security.cert.CertificateException {
					// TODO Auto-generated method stub

				}

			};

			sslContext.init(null, new TrustManager[]{tm}, null);
		}

		@Override
		public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {
			return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
		}

		@Override
		public Socket createSocket() throws IOException {
			return sslContext.getSocketFactory().createSocket();
		}
	}


	final class MyHttpClient extends DefaultHttpClient {

		final Context context;

		public MyHttpClient(Context context) {
			this.context = context;
		}

		@Override
		protected ClientConnectionManager createClientConnectionManager() {
			SchemeRegistry registry = new SchemeRegistry();
			// Register our SSLSocketFactory with the ConnectionManager for port 443 with our keystore
			registry.register(new Scheme("https", newSslSocketFactory(), 443));
			return new SingleClientConnManager(getParams(), registry);
		}

		private SSLSocketFactory newSslSocketFactory() {
			try {
				// Get an instance of the Bouncy Castle KeyStore format
				KeyStore trusted = KeyStore.getInstance("BKS");
				// read the SSL certificate
				ByteArrayInputStream in = new ByteArrayInputStream(imense_ssl_certificate);
				try {
					// Initialize the keystore with the provided trusted certificates
					// Also provide the password of the keystore
					trusted.load(in, decodeString("ZnN3NDJrOA==").toCharArray());

				} finally {
					in.close();
				}
				// Pass the keystore to the SSLSocketFactory. The factory is responsible
				// for the verification of the server certificate.
				SSLSocketFactory sf = new MySSLSocketFactory(trusted);
				// Hostname verification from certificate
				// http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d4e506
				//sf.setHostnameVerifier(SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
				sf.setHostnameVerifier(SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
				return sf;
			} catch (Exception ee) {
				//**/Log.e(tag, "error: "+ee); ee.printStackTrace();
				throw new AssertionError(ee);
			}
		}
	}


	@Override
	protected Boolean doInBackground(Void... arg0) {

		try {

			int[] uid_success = {0};
			//generate unique device ID

			if (device_uid == null || device_uid.length() < VALID_UID_LENGTH) {
				throw new Exception("Invalid UID");
			}

			// Instantiate the custom HttpClient
			DefaultHttpClient client = new MyHttpClient(activity);

			//see http://hc.apache.org/httpcomponents-client/httpclient/xref/index.html
			CredentialsProvider credsProvider = new BasicCredentialsProvider();
			credsProvider.setCredentials(
					new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT),
					new UsernamePasswordCredentials(ImenseLicenseServerLogin, ImenseLicenseServerPassword));
			client.setCredentialsProvider(credsProvider);

			HttpGet httpget = new HttpGet(ImenseLicenseServerURL + device_uid);

			// Execute the GET call and obtain the response
			HttpResponse httpresponse = client.execute(httpget);
			HttpEntity resEntity = httpresponse.getEntity();

			//System.out.println("Response Status: <"+httpresponse.getStatusLine()+">");
			if (resEntity != null) {
				String resS = EntityUtils.toString(resEntity);
				resS = resS.trim();

				if (resS.length() == VALID_KEY_LENGTH && !resS.startsWith("Error:")) {
					//this should be a valid key!
					licensekey = resS;
				} else {
					if (resS.startsWith("Error:")) {
						serverResponseMessage = resS; //human readable error message
					}
				}
			}
			if (resEntity != null) {
				resEntity.consumeContent();
			}

			// When HttpClient instance is no longer needed, 
			// shut down the connection manager to ensure
			// immediate deallocation of all system resources
			client.getConnectionManager().shutdown();

		} catch (Exception ex) {
			//**/Log.e(tag, "error: "+ex); ex.printStackTrace();
		}

		if (licensekey != null && licensekey.length() == VALID_KEY_LENGTH) {


			return true;
		} //if (licensekey != null && licensekey.length()==VALID_KEY_LENGTH) {


		return false;
	}


	@Override
	protected void onPostExecute(Boolean result) {
		super.onPostExecute(result);

		// Send results for single-shot mode recognition.
		if (licensekey != null) {
			//Toast.makeText(androidAppContext, "License key obtained and verified.", Toast.LENGTH_LONG).show();
			//androidAppContext.licenseKey = licensekey;
			CroutonUtils.info(activity, "License key obtained and verified.");
			DBHelper.saveConfig(licensekey);

		} else {
			//Toast.makeText(androidAppContext, "Error getting key. Please make sure WiFi Internet access is working.", Toast.LENGTH_LONG).show();
			CroutonUtils.info(activity, "Error getting key. Please make sure WiFi Internet access is working.");
		}

	}

}


